*wheel.txt*		Buffer Group Manager for Vim and Neovim

==============================================================================
CONTENTS			*wheel*

Introduction			|wheel-introduction|
Step by step			|wheel-step-by-step|
Configuration			|wheel-configuration|
Functions			|wheel-functions|
Mappings			|wheel-mappings|

==============================================================================
INTRODUCTION						*wheel-introduction*


Goal				|wheel-introduction-goal|
Features			|wheel-introduction-features|
History				|wheel-introduction-history|

------------------------------------------------------------------------------
GOAL						*wheel-introduction-goal*

Wheel is a plugin for vim or neovim aimed at managing buffer groups.

In short, this plugin let you organize your buffers by creating as
many buffer groups as you need, add the buffers you want to it and
quickly navigate between :

- Buffers of the same group
- Buffer groups

Note that :

- A location contains a name, a filename, as well as a line & column number
- A buffer group, in fact a location group, is called a circle
- A set of buffer groups is called a torus (a circle of circles)
- The list of toruses is called the wheel

Why do you need three levels of grouping ?~

At first glance, managing groups with circles in a torus seems to
be sufficient. But with time, the torus grows big, and a third level
helps you to organize your files by groups and categories:

  - The wheel contains all the toruses
  - Each torus contains a category of files, e.g.:
    + configuration, development, publication
  - Each circle contains a project, e.g.:
    + emacs or vifm circles in configuration torus
    + shell or elisp in development torus
    + tea or art in publication torus

A wheel that follows you~
    ~
Torus helps you to organize your files in groups that you create
yourself, following your workflow. You only add the files you want,
where you want. For instance, if you have a "organize" group with agenda
& todo files, you can quickly alternate them, or display them in two
windows. Then, if you suddenly got an idea to tune vim, you switch to the
"vim" group with your favorites configuration files in it. Same process,
to cycle, alternate or display the files. Over time, your groups will
grow and adapt to your style.

------------------------------------------------------------------------------
FEATURES				*wheel-introduction-features*

- Easy navigation
  + Jump to matching window if available
- May be saved in torus file
-  Moving elements
-  Display files
  + In header-line tabs
  + In split windows
-  Autogroup
-  Batch operations

------------------------------------------------------------------------------
HISTORY						*wheel-introduction-history*

This project is inspired by :

- CtrlSpace : https://github.com/vim-ctrlspace/vim-ctrlspace, a similar
plugin for Vim

- Torus : https://github.com/chimay/torus, a similar plugin for Emacs,
itself inspired by MTorus

==============================================================================
STEP BY STEP						*wheel-step-by-step*

First circles			|wheel-sbs-first-circles|
Moving around			|wheel-sbs-moving-around|
Square the circle		|wheel-sbs-square-the-circle|

------------------------------------------------------------------------------
FIRST CIRCLES				    	    *wheel-sbs-first-circles*

In the following discussion, I assume that you have kept the default
mapping prefix `<D-w>`.
>
Let’s say we have the files `Juice`, `Tea`, `Coffee` and we want to
group them. So, we go `Juice` and type `<D-w>a` to add a location to the
wheel. If no torus is present in the wheel, it will create it and ask
for a name. Let’s say we name it `Food`. If no group (no circle) is
found in the torus, it will be created and prompt for a name. Let’s say
we choose `Drinks`. Finally, our file `Juice` is added to the group. Its
name is the filename without extension by default.

Then, we go to `Tea` and type `<D-w>a` again. This time, it will just
ask us if we want to keep the default location name. Press enter, and
`Tea` is added to the `Drinks` group.

Same process with `Coffee`. We now have a circle `Drink` containing
three files.

If you want to create another circle, let’s say `Fruits`, simply launch
`<D-w><C-a>`, and answer `Fruits` to the prompt. You can then add the
files `Apple`, `Pear` and `Orange` to it. You can even also add `Juice`:
a file can be added to more than one circle.

Now, suppose that in the `Juice` file, you have a Pineapple
and a Mango sections, and you want to compare them. Just go to
the Pineapple section, and use `<D-w>a`. It will add the location
`Juice:pineapple-line:pineapple-col` to the current circle. Then, go to
the Mango section, and do the same. The `Juice:mango-line:mango-col`
will also be added to the circle. You can then easily alternate both,
or display them in split windows.

If you want to create another torus, let’s say `Books`, simply launch
`<D-w><S-a>`, and answer `Books` to the prompt.

------------------------------------------------------------------------------
MOVING AROUND					     *wheel-sbs-moving-around*

Cycling~

You can cycle the files of a circle with `<D-w><Left>` and
`<D-w><Right>`. These are often used bindings, so I suggest you map them
to a more convient key, like `<C-PageUp>` and `<C-PageDown>`

To cycle the circles, use `<D-w><C-left>` and `<D-w><C-right>`. These are
often used bindings, so I suggest you map them to a more convient key,
like `<C-Home>` and `<C-End>`

To cycle the toruses, use `<D-w><S-left>` and `<D-w><S-right>`. These are
often used bindings, so I suggest you map them to a more convient key,
like `<S-Home>` and `<S-End>`

Switch using completion~

You can also switch location by completion with `<D-w><CR>`.

You can also switch circle by completion with `<D-w><C-CR>`.

You can also switch torus by completion with `<D-w><S-CR>`.

Switch using a special buffer~

You can also switch location by chosing it in a special buffer. The
default mapping is `<D-w><Space>`. Pressing enter on a line will switch
to the matching location. Going to insert mode will allow you to filter
the lines with one or more words.

To choose a given circle in a special buffer, use `<D-w><C-space>`.

To choose a given torus in a special buffer, use `<D-w><S-space>`.

------------------------------------------------------------------------------
SQUARE THE CIRCLE				*wheel-sbs-square-the-circle*

Over time, the number of circles will grow. Completion is great, but
if you just want to alternate the two last circles in history, you’ll
probably prefer `<D-w>^`.

If you press `<D-w><C-^>`, you can choose the alternate mode in a menu :

- Alternate anywhere
- Alternate in the same circle
- Alternate in the same torus
- Alternate in another circle
- Alternate in another torus
- Alternate in same torus but another circle

A common case is to alternate two files in the same circle, and two
circles in the same torus. So, you have the square :

| circle 1, file 1 | circle 1, file 2 |
| circle 2, file 3 | circle 2, file 4 |

at your fingertips.

==============================================================================
CONFIGURATION					    *wheel-configuration*

Dictionary				|wheel-config-dictionary|
Autoread				|wheel-config-autoread|
Autowrite				|wheel-config-autowrite|
File					|wheel-config-file|
Mappings				|wheel-config-mappings|
Backups					|wheel-config-backups|
Cd project				|wheel-config-cd_project|
Project markers				|wheel-config-project_markers|
Max history 				|wheel-config-max_history|
Autocommands				|wheel-config-autocommands|

------------------------------------------------------------------------------
DICTIONARY					  *wheel-config-dictionary*

Customization is done using the `g:wheel_config` dictionary. You must
first initialize it : >

    let g:wheel_config = {}
<

------------------------------------------------------------------------------
AUTOREAD					    *wheel-config-autoread*

>
    let g:wheel_config.autoread = 1
<

------------------------------------------------------------------------------
AUTOWRITE					    *wheel-config-autowrite*

>
    let g:wheel_config.autowrite = 1
<

------------------------------------------------------------------------------
FILE						    *wheel-config-file*

File to save or load the wheel : >
    let g:wheel_config.file = '~/.local/share/wheel/auto.vim'
<

Note that the directory `~/.local/share/wheel` must exist.

------------------------------------------------------------------------------
MAPPINGS					    *wheel-config-mappings*

Determine how many default mappings are available : >
    let g:wheel_config.mappings = 10
<

See |wheel-mappings-levels| for more information.

------------------------------------------------------------------------------
BACKUPS						    *wheel-config-backups*

Number of backup for the wheel file, in case things get messed up
accidentally : >
    let g:wheel_config.backups = 3
<

------------------------------------------------------------------------------
CD PROJECT					*wheel-config-cd_project*

Try to change dir to project root it > 0 : >
    let g:wheel_config.cd_project = 1
<

------------------------------------------------------------------------------
PROJECT MARKERS				*wheel-config-project_markers*

File(s) or directories(s) marking a project root. Can take a string or
list value. : >
    let g:wheel_config.project_markers = '.git'
    let g:wheel_config.project_markers = ['.git', '.my-project-root']
<

------------------------------------------------------------------------------
MAX HISTORY				   *wheel-config-max_history*

Maximum number of elements in the wheel history : >
    let g:wheel_config.max_history = 50
<

------------------------------------------------------------------------------
AUTOCOMMANDS				   *wheel-config-autocommands*

==============================================================================
FUNCTIONS					        *wheel-functions*


==============================================================================
MAPPINGS						    *wheel-mappings*

Levels				|wheel-mappings-levels|
Prefix				|wheel-mappings-prefix|
Mnemonic			|wheel-mappings-mnemonic|
Level 0				|wheel-mappings-level-0|

------------------------------------------------------------------------------
LEVELS						    *wheel-mappings-levels*

The mappings are separated in levels. The option ’g:wheel_config.prefix’,
is an integer which decide how many functions will be bound to keys :
the higher it is, the more mappings available :

- Level 0 : basic
- Level 1 : common
- Level 2 : advanced
- Level 10 : non-prefix mappings

Level 1 or 2 is fine for most usages.

------------------------------------------------------------------------------
PREFIX						    *wheel-mappings-prefix*

Default mappings of levels 0, 1, 2 use a prefix key. This prefix is `<D-w>` by
default. You can customize it :
>
    let g:wheel_config.prefix = '<my-wonderful-prefix>'
<

The `<D-...>` mappings work well with Neovim, but may have some issue with
Vim. In that case, you can change it, e.g. to `<M-w>` :

>
    let g:wheel_config.prefix = '<M-w>'
<

------------------------------------------------------------------------------
MNEMONIC					*wheel-mappings-mnemonic*

Most mappings respect the following convention :

- prefix + `letter`     : location operation
- prefix + `<C-letter>` : circle operation
- prefix + `<S-letter>` : location operation

------------------------------------------------------------------------------
LEVEL 0						*wheel-mappings-level-0*

Add~

| Prefix + | With Default prefix | Action                             |
| `a`        | `<D-w>a`              | Add location to the current circle |
| `<C-a>`    | `<D-w><C-a>`          | Add circle to the current torus    |
| `A`        | `<D-w>A`              | Add torus to the wheel             |
| `f`        | `<D-w>f`              | Add file                           |
| `b`        | `<D-w>b`              | Add buffer                         |
| `<D-a>`    | `<D-w><D-a>`          | Add menu                           |

Navigation : next / previous~

| Prefix +    | With Default prefix | Action                  |
| `<left>`      | `<D-w><left>`         | Go to previous location |
| `<right>`     | `<D-w><right>`        | Go to next location     |
| `<C-left>`    | `<D-w><C-left>`       | Go to previous circle   |
| `<C-right>`   | `<D-w><C-right>`      | Go to next circle       |
| `<S-left>`    | `<D-w><S-left>`       | Go to previous torus    |
| `<S-right>`   | `<D-w><S-right>`      | Go to next torus        |

Read / Write file~

| Prefix + | With Default prefix | Action             |
| `r`        | `<D-w>r`              | Load wheel file    |
| `w`        | `<D-w>w`              | Save wheel in file |

------------------------------------------------------------------------------
LEVEL 1						*wheel-mappings-level-1*

Rename~

| Prefix + | With Default prefix | Action                  |
| `n`        | `<D-w>n`              | Rename current location |
| `<C-n>`    | `<D-w><C-n>`          | Rename current circle   |
| `N`        | `<D-w>N`              | Rename current torus    |

Delete~

| Prefix + | With Default prefix | Action                  |
| `d`         | `<D-w>d`             | Delete current location |
| `<C-d>`     | `<D-w><C-d>`         | Delete current circle   |
| `D`         | `<D-w>D`             | Delete current torus    |

Navigation : switch~

| Prefix + | With Default prefix | Action             |
| `<CR>`     | `<D-w><CR>`           | Switch to location |
| `<C-CR>`   | `<D-w><C_CR>`         | Switch to circle   |
| `<S-CR>`   | `<D-w><S-CR>`         | Switch to torus    |

History~

| Prefix +      | With Default prefix | Action                          |
| `<tab>`         | `<D-w><tab>`          | Go to newer location in history |
| `<backspace>`   | `<D-w><backspace>`    | Go to older location in history |
| `^`             | `<D-w>^`              | Alternate last two locations    |
| `<C-^>`         | `<D-w><C-^>`          | Menu to alternate locations     |

------------------------------------------------------------------------------
LEVEL 2						*wheel-mappings-level-2*

------------------------------------------------------------------------------
LEVEL 10					*wheel-mappings-level-10*

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:
