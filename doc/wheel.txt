*wheel.txt*		Buffer Group Manager for Vim and Neovim

==============================================================================
CONTENTS			*wheel*

Introduction			|wheel-introduction|
Step by step			|wheel-step-by-step|
Special buffers			|wheel-special-buffers|
Batch mode			|wheel-batch-operations|
Configuration			|wheel-configuration|
Autocommands			|wheel-autocommands|
Functions			|wheel-functions|
Mappings			|wheel-mappings|

==============================================================================
INTRODUCTION						*wheel-introduction*


Goal				|wheel-introduction-goal|
Features			|wheel-introduction-features|
History				|wheel-introduction-history|

------------------------------------------------------------------------------
GOAL						*wheel-introduction-goal*

Wheel is a plugin for vim or neovim aimed at managing buffer groups.

In short, this plugin let you organize your buffers by creating as
many buffer groups as you need, add the buffers you want to it and
quickly navigate between :

- Buffers of the same group
- Buffer groups

Note that :

- A location contains a name, a filename, as well as a line & column number
- A buffer group, in fact a location group, is called a circle
- A set of buffer groups is called a torus (a circle of circles)
- The list of toruses is called the wheel

Why do you need three levels of grouping ?~

At first glance, managing groups with circles in a torus seems to
be sufficient. But with time, the torus grows big, and a third level
helps you to organize your files by groups and categories:

  - The wheel contains all the toruses
  - Each torus contains a category of files, e.g.:
    + configuration, development, publication
  - Each circle contains a project, e.g.:
    + emacs or vifm circles in configuration torus
    + shell or elisp in development torus
    + tea or art in publication torus

A wheel that follows you~
    ~
Wheel helps you to organize your files in groups that you create
yourself, following your workflow. You only add the files you want,
where you want. For instance, if you have a "organize" group with agenda
& todo files, you can quickly alternate them, or display them in two
windows. Then, if you suddenly got an idea to tune vim, you switch to the
"vim" group with your favorites configuration files in it. Same process,
to cycle, alternate or display the files. Over time, your groups will
grow and adapt to your style.

------------------------------------------------------------------------------
FEATURES				*wheel-introduction-features*

- Add
  + Files from anywhere in the filesystem
  + A file in more than one group
  + file:line-1 and file:line-2 in the same group
- Easy navigation
  + On demand loading of files
  + Switch to matching tab & window if available
  + Choose file, group or category in special buffer
    * Filter candidates
    * Folds matching wheel tree structure
  + Auto |:lcd| to project root of current file
- May be saved in wheel file
- Reorganizing elements
- Display files
  + Split levels : torus, circle, location
  + Split : vertical, horizontal, grid, main
  + Mix of above
    * circles on tabs, locations on split
    * toruses on tabs, circles on split
- Batch operations
- Grep on group files
- Yank wheel using TextYankPost event

------------------------------------------------------------------------------
HISTORY						*wheel-introduction-history*

This project is inspired by :

- CtrlSpace : https://github.com/vim-ctrlspace/vim-ctrlspace, a similar
plugin for Vim

- Torus : https://github.com/chimay/torus, a similar plugin for Emacs,
itself inspired by MTorus

==============================================================================
STEP BY STEP						*wheel-step-by-step*

Prefix				|wheel-sbs-prefix|
One map to ring them all	|wheel-sbs-one-map-to-ring-them-all|
First circles			|wheel-sbs-first-circles|
Moving around			|wheel-sbs-moving-around|
Square the circle		|wheel-sbs-square-the-circle|

------------------------------------------------------------------------------
PREFIX						*wheel-sbs-prefix*

In the following discussion, I assume that you have kept the default
mapping prefix : >

 let g:wheel_config.prefix = '<M-w>'
<

------------------------------------------------------------------------------
ONE MAP TO RING THEM ALL		*wheel-sbs-one-map-to-ring-them-all*

To get an overview of the Wheel, I suggest you take a look at the main
menu. Press `<M-w>m` and a new buffer will appear, listing the actions
you can perform. Insert mode is used to filter the lines. Press enter
in normal mode to trigger an action (if you know what you’re doing),
or `q` to quit the menu.

If you prefer the meta menu leading you to thematic sub-menus, you can
launch it with `<M-w>=`.

To learn more about menus, see |wheel-special-buffers-menus|.

------------------------------------------------------------------------------
FIRST CIRCLES				    	    *wheel-sbs-first-circles*

Let’s say we have the files `Juice`, `Tea`, `Coffee` and we want to
group them. So, we go to `Juice` and type `<M-w>a` to add a location to
the wheel. If no category (no torus) is present in the wheel, it will
create it and ask for a name. Let’s say we name it `Food`. If no group
(no circle) is found in the torus, it will be created and prompt for a
name. Let’s say we choose `Drinks`. Finally, our file `Juice` is added
to the group. Its name is the filename without extension by default.

Then, we go to `Tea` and type `<M-w>a` again. This time, it will just
ask us if we want to keep the default location name. Press enter, and
`Tea` is added to the `Drinks` group.

Same process with `Coffee`. We now have a circle `Drink` containing
three files.

Now, suppose that in the `Juice` file, you have a Pineapple
and a Mango sections, and you want to compare them. Just go to
the Pineapple section, and use `<M-w>a`. It will add the location
`Juice:pineapple-line:pineapple-col` to the current circle. Then, go to
the Mango section, and do the same. The `Juice:mango-line:mango-col`
will also be added to the circle. You can then easily alternate both,
or display them in split windows.

If you want to create another group (circle), let’s say `Fruits`,
simply launch `<M-w><C-a>`, and answer `Fruits` to the prompt. You can
then add the files `Apple`, `Pear` and `Orange` to it. You can even also
add `Juice`: a file can be added to more than one circle.

If you want to create another category (torus), let’s say `Books`,
simply launch `<M-w><S-a>`, and answer `Books` to the prompt.

------------------------------------------------------------------------------
MOVING AROUND					     *wheel-sbs-moving-around*

Cycling~

You can cycle the files of a circle with `<M-w><Left>` and
`<M-w><Right>`. These are often used bindings, so I suggest you map them
to more convenient keys, like `<C-PageUp>` and `<C-PageDown>`. See
|wheel-mappings-level-10|.

To cycle the circles, use `<M-w><C-Left>` and `<M-w><C-Right>`. You can
also map them to more convenient keys, like `<C-Home>` and `<C-End>`.

To cycle the toruses, use `<M-w><S-Left>` and `<M-w><S-Right>` or
map them to `<S-Home>` and `<S-End>`.

Switch using completion~

You can switch :

- location with completion with `<M-w><CR>`
- circle with completion with `<M-w><C-CR>`
- torus with completion with `<M-w><S-CR>`

Switch using a special buffer~

You can also switch location, circle or torus by chosing it in |wheel-special-buffers|.

------------------------------------------------------------------------------
SQUARE THE CIRCLE				*wheel-sbs-square-the-circle*

Over time, the number of circles will grow. Completion is great, but
if you just want to alternate the two last circles in history, you’ll
probably prefer `<M-w>^`.

The main menu offers you these alternate variants :

- Alternate anywhere
- Alternate in the same circle
- Alternate in the same torus
- Alternate in another circle
- Alternate in another torus
- Alternate in same torus but another circle

A common case is to alternate two files in the same circle, and two
circles in the same torus. So, you have the square :

 Alternate    | File 1	        | File 2
--------------|-----------------|-----------------
Circle Drinks | Juice           | Tea
Circle Fruits | Apple           | Pear

at your fingertips.

==============================================================================
SPECIAL BUFFERS					    *wheel-special-buffers*

Introduction			|wheel-special-buffers-introduction|
Menu buffers			|wheel-special-buffers-menus|
Navigation buffers		|wheel-special-buffers-navigation|
Reordering buffers		|wheel-special-buffers-reordering|
Reorganizing buffers		|wheel-special-buffers-reorganizing|
Yank buffer			|wheel-special-buffers-yank|
Batch buffer			|wheel-special-buffers-batch|

------------------------------------------------------------------------------
INTRODUCTION				*wheel-special-buffers-introduction*

Special buffers allow you to perform Wheel operations intuitively, using
full power of your editor : search, yank, paste, completion, and so on.

The available actions depend on the context :

- Menu buffers allow you to launch a wheel function
- Navigation buffers allow you to switch to a location, circle or torus
- Reordering buffers allow you to reorder locations, circles or toruses
- Reorganize buffer allows you to move and copy around locations, circles and toruses

Wrapping up things~

In normal mode, the keys `j`/`k` and `<up>`/`<down>` wrap the buffer :

- If on the first line, `k` or `<up>` will go to the last line
- If on the last line, `j` or `<down>` will go to the first line

Filtering~

In most special buffers, the first line is left empty : it is used as
an input line to filter the buffer. You can go to insert mode and filter
the elements with each word you enter on the input (first) line. Typing
`<Space>`, `<Esc>` or `<CR>` will update the candidates. Note that `<C-c>`
is not mapped, in case you need to go to normal mode without triggering
the filter function.

Input history~

An input history is available in insert mode. You can insert the
previous/next input with `<Up>`/`<Down>` or `<M-p>`/`<M-n>`.

The keys `<PageUp>`/`PageDown` or `<C-r>`/`<C-s>` will insert the
previous/next input matching the beginning of the inserted line, until
the cursor.

------------------------------------------------------------------------------
MENU BUFFERS				*wheel-special-buffers-menus*

Each menu has its own dedicated buffer. You can filter the menu lines
by entering words in insert mode.

Main menu~

The main menu is triggered with `<M-w>m` by default. From there, you
can launch the action you want by pressing `<enter>` on its line.

Meta menu~

Press `<M-w>=` to open the meta menu : each line in this buffer will
launch a sub-menu. Each sub-menu holds the actions of the same category :

- Add a new element to the wheel
- Rename an element
- Delete an element
- Switch to an element
- Alternate last two elements
- Display elements in tabs & windows
- Reorganize elements

------------------------------------------------------------------------------
NAVIGATION BUFFERS			*wheel-special-buffers-navigation*

The navigation buffers allow you to quickly switch to a Wheel location
by pressing `<enter>` on the matching line. The buffer will be opened
in previous used window. You can also use the keys :

- `t` : open buffer in a new tab
- `s` : open buffer in a new split
- `v` : open buffer in a new vsplit
- `<tab>` : same as `<enter>`, but without closing the navigation buffer

Mappings~

The default mappings launching navigation buffers are :

- `<M-w><Space>`   : switch to location
- `<M-w><C-space>` : switch to current location of the chosen circle
- `<M-w><S-space>` : switch to current location of the chosen torus
- `<M-w>x`         : index of toruses >> circles > locations
- `<M-w><C-x>`     : index of toruses >> circles
- `<M-w><M-x>`     : index with folds (see below)

Folding~

The map `<M-w><M-s>` opens a dedicated buffer where folds are used to
reflect the tree structure of the Wheel : toruses, circles and locations.

Filtering in that buffer will keep surrounding folds ; only non mathing
empty folds will be removed.

Selection~

Pressing `<Space>` will toggle the selection of the current line. If a
line is selected, it will begin with an asterisk. You can then open all
selected files in tabs, splits or vertical splits.

------------------------------------------------------------------------------
REORDERING BUFFERS			*wheel-special-buffers-reordering*

The reordering buffers allow you to quickly reorder Wheel elements by
reordering the buffer lines. You can use yank/delete/paste operations to
perform the reordering, or sort them with |:sort|.

Please yank/delete entire lines, or your data could loose their integrity.

To validate your change, simply |:write| the buffer.

The number of lines will be checked and, if there is missing or excedent
lines, Wheel will refuse to apply your change.

Mappings~

The default mappings launching reordering buffers are :

- `<M-w>o`   : reorder locations
- `<M-w><C-o>` : reorder circles
- `<M-w>O` : reorder toruses

Pressed the wrong button ?~

If something goes wrong, you can quit the buffer and re-read the wheel
variables with `<M-w>r`.

------------------------------------------------------------------------------
REORGANIZING BUFFERS			*wheel-special-buffers-reorganizing*

The reorganizing buffer allows you to quickly reorganize the Wheel
elements. All elements of the wheel are represented, and folds are used
to reflect the tree structure of the Wheel :

- torus names
- circle names
- locations (the dictionary lines)

You can :

- copy or move elements by copying or moving the buffer lines
  + copy or move a location to another circle
  + copy or move a circle to another torus
  + reordering elements (but without check)
- rename elements
- change line or column of a location

Please move or copy entire lines, or your data could loose their
integrity. Be aware that removing a line will remove the corresponding
element from the wheel.

To validate your change, simply |:write| the buffer.

Mappings~

The default mapping is `<M-w><M-o>`.

Pressed the wrong button ?~

If something goes wrong, you can quit the buffer and re-read the wheel
variables with `<M-w>r`.

------------------------------------------------------------------------------
YANK BUFFER				*wheel-special-buffers-yank*

List mode~

The yank wheel buffer in list mode is launched by `<M-w>y`.

Each line of the special buffer is one of your yanks, represented as a
list, one element per line. To paste a yank, just press `<enter>` or `p`.

You can filter the elements in insert mode.

Plain mode~

The yank wheel buffer in plain mode is launched by `<M-w><M-y>`.

All your yanks are concatenated and displayed in the special buffer.
To paste a line, just press `<enter>` or `p`. You can also go to visual
mode and paste your selection.

You can filter the elements in insert mode.

------------------------------------------------------------------------------
BATCH BUFFER				*wheel-special-buffers-batch*

See |wheel-batch-command|.

==============================================================================
BATCH OPERATIONS				    *wheel-batch-operations*

Batch command			|wheel-batch-command|
Grep search			|wheel-batch-grep|

------------------------------------------------------------------------------
BATCH COMMAND					    *wheel-batch-command*

The command : >

 WheelBatch my_command
<

uses the argument list to execute `<command>` on each location of the
current circle. The command can be a vim `:command` or an external shell
`!command`. The ouput is displayed in a dedicated buffer.

------------------------------------------------------------------------------
GREP SEARCH					    *wheel-batch-grep*

The command : >

 WheelGrep my_pattern
<

launches a |:grep| search in the current circle files. The results are
displayed in the usual |quickfix| window.

==============================================================================
CONFIGURATION					    *wheel-configuration*

Dictionary				|wheel-config-dictionary|
Autoread				|wheel-config-autoread|
Autowrite				|wheel-config-autowrite|
File					|wheel-config-file|
Backups					|wheel-config-backups|
Mappings				|wheel-config-mappings|
Prefix					|wheel-config-prefix|
Cd project				|wheel-config-cd_project|
Project markers				|wheel-config-project_markers|
Max history 				|wheel-config-maxim-history|
Max input history 			|wheel-config-maxim-input|
Max yanks 				|wheel-config-maxim-yanks|
Max yank size 				|wheel-config-maxim-yank_size|
Example					|wheel-config-example|

------------------------------------------------------------------------------
DICTIONARY					  *wheel-config-dictionary*

Customization is done using the `g:wheel_config` dictionary. You must
first initialize it : >

    let g:wheel_config = {}
<

------------------------------------------------------------------------------
AUTOREAD					    *wheel-config-autoread*

Auto read torus file on startup if non null : >

    let g:wheel_config.autoread = 1
<

------------------------------------------------------------------------------
AUTOWRITE					    *wheel-config-autowrite*


" Auto write torus file on exit if non null : >

    let g:wheel_config.autowrite = 1
<

To enable it, you need to add an autocommand on vim leave : >

    autocmd VimLeave * call wheel#void#exit()
<

------------------------------------------------------------------------------
FILE						    *wheel-config-file*

File to save or load the wheel : >

    let g:wheel_config.file = '~/.local/share/wheel/auto.vim'
<

Note that the directory `~/.local/share/wheel` must exist.

It is recommended to define this file and regularly save it, either manually
or automatically, using the autowrite config.

------------------------------------------------------------------------------
BACKUPS						    *wheel-config-backups*

Number of backup for the wheel file : >

    let g:wheel_config.backups = 3
<

Assuming your wheel file is `auto.vim`, the backups will be named
`auto.vim.1`, `auto.vim.2`, `auto.vim.3`, and so on.

It is recommended to use backups, in case things get messed up
accidentally.

------------------------------------------------------------------------------
MAPPINGS					    *wheel-config-mappings*

Determine how many default mappings are available : >

    let g:wheel_config.mappings = 10
<

See |wheel-mappings-levels| for more information.

------------------------------------------------------------------------------
PREFIX						    *wheel-config-prefix*

Prefix for mappings of level 0, 1, 2 : >

    let g:wheel_config.prefix = '<my-wonderful-prefix>'
<

See |wheel-mappings-prefix| for more information.

------------------------------------------------------------------------------
CD PROJECT					*wheel-config-cd_project*

Try to change dir to project root it > 0 : >

    let g:wheel_config.cd_project = 1
<

------------------------------------------------------------------------------
PROJECT MARKERS				*wheel-config-project_markers*

File(s) or directories(s) marking a project root. Can take a string or
list value. : >

    let g:wheel_config.project_markers = '.git'
    let g:wheel_config.project_markers = ['.git', '.my-project-root']
<

------------------------------------------------------------------------------
MAX NUMBER OF ELEMENTS IN HISTORY		   *wheel-config-maxim-history*

Maximum number of elements in the wheel history : >

    let g:wheel_config.maxim.history = 50
<

------------------------------------------------------------------------------
MAX NUMBER OF ELEMENTS IN INPUT HISTORY		   *wheel-config-maxim-input*

Maximum number of elements in the wheel history : >

    let g:wheel_config.maxim.input = 100
<

------------------------------------------------------------------------------
MAX NUMBER OF ELEMENTS IN YANK WHEEL		   *wheel-config-maxim-yanks*

Maximum number of elements in the yank wheel : >

    let g:wheel_config.maxim.yanks = 300
<

------------------------------------------------------------------------------
MAX SIZE OF A YANK IN YANK WHEEL	   *wheel-config-maxim-yank_size*

Maximum size of elements in the yank wheel : >

    let g:wheel_config.maxim.yank_size = 3000
<

------------------------------------------------------------------------------
EXAMPLE					    *wheel-config-example*

Here is an example of a complete configuration : >

  " Init
  let g:wheel_config={}
  let g:wheel_config.maxim={}

  " Auto read torus file on startup if > 0
  let g:wheel_config.autoread = 1
  " Auto write torus file on exit if > 0
  let g:wheel_config.autowrite = 1
  " The file where toruses and circles will be stored and read
  let g:wheel_config.file = '~/.local/share/wheel/auto.vim'
  " Number of backups for the wheel file
  let g:wheel_config.backups = 5
  " The bigger it is, the more mappings available
  let g:wheel_config.mappings = 10
  " Prefix for mappings
  let g:wheel_config.prefix = '<M-w>'
  " Auto cd to project root if > 0
  let g:wheel_config.cd_project = 1
  " Marker of project root
  "let g:wheel_config.project_markers = '.git'
  "let g:wheel_config.project_markers = '.racine-projet'
  " List of markers
  " The project dir is found as soon as one marker is found in it
  let g:wheel_config.project_markers = ['.git', '.racine-projet']

  " Maximum number of elements in history
  let g:wheel_config.maxim.history = 50
  " Maximum number of elements in input history
  let g:wheel_config.maxim.input = 100
  " Maximum number of elements in yank wheel
  let g:wheel_config.maxim.yanks = 300
  " Maximum size of elements in yank wheel
  let g:wheel_config.maxim.yank_size = 3000
  " Maximum number of tabs
  let g:wheel_config.maxim.tabs = 12
  " Maximum number of horizontal splits
  let g:wheel_config.maxim.horizontal = 3
  " Maximum number of vertical splits
  let g:wheel_config.maxim.vertical = 4
<

==============================================================================
AUTOCOMMANDS					   *wheel-autocommands*

Auto write			|wheel-autocommands-auto-write|
After jump			|wheel-autocommands-after-jump|
Auto follow			|wheel-autocommands-auto-follow|
Auto update			|wheel-autocommands-auto-update|
Yank wheel			|wheel-autocommands-yank|
Example				|wheel-autocommands-example|

------------------------------------------------------------------------------
AUTO WRITE				*wheel-autocommands-auto-write*

To enable autowrite, you need to add an autocommand on vim leave : >

    autocmd VimLeave * call wheel#void#exit()
<

------------------------------------------------------------------------------
AFTER JUMP				*wheel-autocommands-after-jump*

The user autocommands `WheelAfterJump` are executed at the end of each
navigation operation in the Wheel ; basically, each time you jump to
another file using wheel functions.

This example fold everything except the cursor line : >

    autocmd User WheelAfterJump norm zMzx
<

------------------------------------------------------------------------------
AUTO FOLLOW		    		*wheel-autocommands-auto-follow*

If you wish the wheel to auto-follow the buffers you enter, you can add
this autocommand : >

    autocmd BufWinEnter * call wheel#projection#follow()
<

It will work for all buffer filenames belonging to the wheel. It is
useful when you search with grep and the quickfix window, or when you
edit a file with a classic vim command.

Be aware that it will update the wheel cursor position of your buffer,
which makes sense.

------------------------------------------------------------------------------
AUTO UPDATE				*wheel-autocommands-auto-update*

If you want to update your cursor position each time you leave a window : >

  autocmd BufWinLeave * call wheel#vortex#update()
<

------------------------------------------------------------------------------
YANK WHEEL					*wheel-autocommands-yank*

If you want to record your yanks/delete, you can add this autommand to
your init file : >

 autocmd TextYankPost * call wheel#codex#add()
<

------------------------------------------------------------------------------
EXAMPLES				    *wheel-autocommands-examples*

Here is an example of a complete autocommands configuration : >

  " Autocommands on vim leave, for autowriting
  autocmd VimLeave * call wheel#void#exit()
  " Autocommands executed after jumping to a location
  autocmd User WheelAfterJump norm zMzx
  " For current wheel location to auto follow buffer change
  autocmd BufWinEnter * call wheel#projection#follow()
  " Update location line & col before leaving a window
  autocmd BufWinLeave * call wheel#vortex#update()
  " To record your yanks in the yank wheel
  autocmd TextYankPost * call wheel#codex#add()
<

==============================================================================
FUNCTIONS					        *wheel-functions*

The functions used as User Interface are listed :

- In the mappings of autoload/wheel/centre.vim
- In the menus of autoload/wheel/hub.vim

==============================================================================
MAPPINGS						    *wheel-mappings*

Levels				|wheel-mappings-levels|
Prefix				|wheel-mappings-prefix|
Mnemonic			|wheel-mappings-mnemonic|
Level 0				|wheel-mappings-level-0|
Level 1				|wheel-mappings-level-1|
Level 2				|wheel-mappings-level-2|
Level 10			|wheel-mappings-level-10|

------------------------------------------------------------------------------
LEVELS						    *wheel-mappings-levels*

The mappings are organized in levels :

- Level 0  : basic
- Level 1  : common
- Level 2  : advanced
- Level 10 : non-prefix mappings

If you set the option `g:wheel_config.prefix` to an integer `N`, all
mappings of level less or equal to `N` will be bound to keys. So, the
higher this option, the more mappings available.

E.g., if you want a level of 2 : >

    let g:wheel_config.prefix = 2
<

Level 1 or 2 is fine for most usages. See |wheel-mappings-level-0| and
subsequent for more information.

------------------------------------------------------------------------------
PREFIX						    *wheel-mappings-prefix*

Default mappings of levels 0, 1, 2 use a prefix key. This prefix is `<M-w>` by
default. You can customize it : >

    let g:wheel_config.prefix = '<my-wonderful-prefix>'
<

I like to set it to `<D-w>`, but since the `<D-...>` mappings don't seem
to work in terminal or with Gvim, it is not the default. It's working on
Neovim-qt, though : >

    let g:wheel_config.prefix = '<D-w>'
<

------------------------------------------------------------------------------
MNEMONIC					*wheel-mappings-mnemonic*

Most mappings respect the following convention :

- prefix + `letter`     : location operation
- prefix + `<C-letter>` : circle operation
- prefix + `<S-letter>` : location operation

------------------------------------------------------------------------------
LEVEL 0						*wheel-mappings-level-0*

Menus~

The most important mapping is `<M-w>m` : it launches a menu in a
special buffer, and from there you can trigger all sort of actions on
the Wheel. See |wheel-special-buffers-menu| for more information.

| Prefix + | With default prefix | Action                  |
| m        | <M-w>m              | Main menu               |
| =        | <M-w>=              | Meta menu               |

Add~

| Prefix + | With default prefix | Action                             |
| a        | <M-w>a              | Add location to the current circle |
| <C-a>    | <M-w><C-a>          | Add circle to the current torus    |
| A        | <M-w>A              | Add torus to the wheel             |
| f        | <M-w>f              | Add file                           |
| b        | <M-w>b              | Add buffer                         |

Navigation : next / previous~

| Prefix +    | With default prefix | Action                  |
| <left>      | <M-w><left>         | Go to previous location |
| <right>     | <M-w><right>        | Go to next location     |
| <C-left>    | <M-w><C-left>       | Go to previous circle   |
| <C-right>   | <M-w><C-right>      | Go to next circle       |
| <S-left>    | <M-w><S-left>       | Go to previous torus    |
| <S-right>   | <M-w><S-right>      | Go to next torus        |

Read / Write file~

| Prefix + | With default prefix | Action             |
| r        | <M-w>r              | Load wheel file    |
| w        | <M-w>w              | Save wheel in file |

------------------------------------------------------------------------------
LEVEL 1						*wheel-mappings-level-1*

Special buffers~

| Prefix +  | With default prefix | Action                                  |
| <Space>   | <M-w><Space>        | Switch to location                      |
| <C-Space> | <M-w><C-Space>      | Switch to circle                        |
| <S-Space> | <M-w><S-Space>      | Switch to torus                         |
| x         | <M-w>x              | Index of toruses >> circles > locations |
| <C-x>     | <M-w><C-x>          | Index of toruses >> circles             |
| <M-x>     | <M-w><M-x>          | Index with folds                        |
| h         | <M-w>h              | History index                           |
| o         | <M-w>o              | Reorder locations in current circle     |
| <C-o>     | <M-w><C-o>          | Reorder circles in current torus        |
| O         | <M-w>O              | Reorder toruses in wheel                |

Rename~

| Prefix + | With default prefix | Action                  |
| n        | <M-w>n              | Rename current location |
| <C-n>    | <M-w><C-n>          | Rename current circle   |
| N        | <M-w>N              | Rename current torus    |

Delete~

| Prefix + | With default prefix | Action                  |
| d        | <M-w>d              | Delete current location |
| <C-d>    | <M-w><C-d>          | Delete current circle   |
| D        | <M-w>D              | Delete current torus    |

Navigation~

| Prefix +  | With default prefix | Action             |
| <CR>      | <M-w><CR>           | Switch to location |
| <C-CR>    | <M-w><C-CR>         | Switch to circle   |
| <S-CR>    | <M-w><S-CR>         | Switch to torus    |

History~

| Prefix +      | With default prefix | Action                          |
| <tab>         | <M-w><tab>          | Go to newer location in history |
| <backspace>   | <M-w><backspace>    | Go to older location in history |
| ^             | <M-w>^              | Alternate last two locations    |

------------------------------------------------------------------------------
LEVEL 2						*wheel-mappings-level-2*

Tabs~

You can display all locations of the current circle, one location per
tab. Same idea with circles and toruses.

| Prefix + | With default prefix | Action                               |
| t        | <M-w>t              | One location per tab                 |
| <C-t>    | <M-w><C-t>          | One circle per tab                   |
| T        | <M-w>T              | One torus per tab                    |

Windows~

You can display all locations of the current circle, one location per
window. Same idea with circles and toruses.

| Prefix + | With default prefix | Action                            |
| s        | <M-w>s              | One location per horizontal split |
| <C-s>    | <M-w><C-s>          | One circle per horizontal split   |
| S        | <M-w>S              | One torus per horizontal split    |
| v        | <M-w>v              | One location per vertical split   |
| <C-v>    | <M-w><C-v>          | One circle per vertical split     |
| V        | <M-w>V              | One torus per vertical split      |
| l        | <M-w>l              | Locations in main left layout     |
| <C-l>    | <M-w><C-l>          | Circles in main left layout       |
| L        | <M-w>L              | Toruses in main left layout       |
| g        | <M-w>g              | Locations in grid layout          |
| <C-g>    | <M-w><C-g>          | Circles in grid layout            |
| G        | <M-w>G              | Toruses in grid layout            |

Tabs & Windows~

| Prefix + | With default prefix | Action                               |
| z        | <M-w>z              | Zoom : one tab, one window           |
| P        | <M-w>P              | Toruses in tabs, circles in windows  |
| <C-p>    | <M-w><C-p>          | Circes in tabs, locations in windows |

Yank wheel~

| Prefix + | With default prefix | Action                                        |
| y        | <M-w>y              | Paste an element of yank wheel in list mode   |
| <M-y>    | <M-w><M-y>          | Paste an element of yank wheel in insert mode |

Reorganizing buffer~

| Prefix + | With default prefix | Action                    |
| <M-o>    | <M-w><M-o>          | Reorganize wheel elements |

------------------------------------------------------------------------------
LEVEL 10					*wheel-mappings-level-10*

The level 10 offers quicker mappings for the most used wheel functions. You
can set the mapping level to 10 to activate them, or adapt them to your taste
and add them to your init file.

| Mapping        | Action                                      |
| <D-=>          | Meta menu                                   |
| <D-m>          | Main menu                                   |
| <Space>        | Choose location in special buffer           |
| <C-Space>      | Choose circle in special buffer             |
| <S-Space>      | Choose torus in special buffer              |
| <D-Space>      | Choose element in wheel folding tree        |
| <M-Space>      | Reorganize wheel elements                   |
| <D-Insert>     | Add location to the current circle          |
| <D-Del>        | Delete current location                     |
| <C-PageUp>     | Go to previous location                     |
| <C-PageDown>   | Go to next location                         |
| <C-Home>       | Go to previous circle                       |
| <C-End>        | Go to next circle                           |
| <S-Home>       | Go to previous torus                        |
| <S-End>        | Go to next torus                            |
| <S-PageUp>     | Go to newer location in history             |
| <S-PageDown>   | Go to older location in history             |
| <C-^>          | Alternate last two locations                |
| <D-^>          | Alternate in same torus, other circle       |
| <C-S-PageUp>   | Alternate in same torus                     |
| <C-S-PageDown> | Alternate in same circle                    |
| <C-S-Home>     | Alternate in other torus                    |
| <C-S-End>      | Alternate in other circle                   |
| <D-y>          | Paste yank wheel element in list mode       |
| <D-p>          | Paste yank wheel element in plain mode      |
| <D-b>          | Batch operation in current circle files     |
| <D-g>          | Grep in current circle files                |
| <D-z>          | Zoom : one tab, one window                  |
| <D-t>          | One location per tab                        |
| <D-l>          | One location per window, main left layout   |
| <D-&>          | One circle per tab, one location per window |
| <M-PageUp>     | Rotate windows counter-clockwise            |
| <M-PageDown>   | Rotate windows clockwise                    |

Here is the default level 10, if you wish to customize it : >

    " Hub : Menus
    nnoremap <D-=>        :call wheel#hub#meta()<cr>
    nnoremap <D-m>        :call wheel#hub#main()<cr>
    " Mandala : special buffers
    nnoremap <Space>      :call wheel#mandala#switch('location')<cr>
    nnoremap <C-Space>    :call wheel#mandala#switch('circle')<cr>
    nnoremap <S-Space>    :call wheel#mandala#switch('torus')<cr>
    nnoremap <D-Space>    :call wheel#mandala#tree()<cr>
    nnoremap <M-Space>    :call wheel#mandala#reorganize()<cr>
    " Tree : add, rename, delete
    nnoremap <D-Insert>   :call wheel#tree#add_here()<cr>
    nnoremap <D-Del>      :call wheel#tree#delete('location')<cr>
    " Vortex : switch
    nnoremap <C-PageUp>   :call wheel#vortex#previous('location')<cr>
    nnoremap <C-PageDown> :call wheel#vortex#next('location')<cr>
    nnoremap <C-Home>     :call wheel#vortex#previous('circle')<cr>
    nnoremap <C-End>      :call wheel#vortex#next('circle')<cr>
    nnoremap <S-Home>     :call wheel#vortex#previous('torus')<cr>
    nnoremap <S-End>      :call wheel#vortex#next('torus')<cr>
    " Pendulum : history
    nnoremap <S-PageUp>     :call wheel#pendulum#newer()<cr>
    nnoremap <S-PageDown>   :call wheel#pendulum#older()<cr>
    nnoremap <C-^>          :call wheel#pendulum#alternate()<cr>
    nnoremap <D-^>          :call wheel#pendulum#alternate_same_torus_other_circle()<cr>
    nnoremap <C-S-PageUp>   :call wheel#pendulum#alternate_same_torus()<cr>
    nnoremap <C-S-PageDown> :call wheel#pendulum#alternate_same_circle()<cr>
    nnoremap <C-S-Home>     :call wheel#pendulum#alternate_other_torus()<cr>
    nnoremap <C-S-End>      :call wheel#pendulum#alternate_other_circle()<cr>
    " Yank
    nnoremap <D-y>          :call wheel#mandala#yank('list')<cr>
    nnoremap <D-p>          :call wheel#mandala#yank('plain')<cr>
    " Batch
    nnoremap <D-b>          :WheelBatch<space>
    nnoremap <D-g>          :WheelGrep<space>
    " Windows
    nnoremap <D-z>          :call wheel#mosaic#zoom()<cr>
    nnoremap <D-t>          :call wheel#mosaic#tabs('location')<cr>
    nnoremap <D-l>          :call wheel#mosaic#split('location', 'main_left')<cr>
    nnoremap <D-&>          :call wheel#pyramid#steps('circle')<cr>
    " Rotate windows
    nnoremap <M-PageUp>     :call wheel#mosaic#rotate_counter_clockwise()<cr>
    nnoremap <M-PageDown>   :call wheel#mosaic#rotate_clockwise()<cr>
<

------------------------------------------------------------------------------
LEVEL 20					*wheel-mappings-level-20*

For debug only.

| Prefix + | With default prefix | Action                               |
| Z        | <M-w>Z              | Reset wheel variables to empty wheel |

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:
